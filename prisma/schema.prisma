// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String        @unique
  phone          String?
  password       String
  social_provider String?      // 'google', 'linkedin', etc.
  social_id      String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  isStudent  Boolean @default(true) // üëà add this line
   // üÜï optional field
  roleInOrganization String?         // null allowed

  profile        UserProfile?
  employerProfile   EmployerProfile?
  resumes        Resume[]
  js_languages   JS_languages[]   // üëà Inverse relation added
  enrollment     Enrollment[]
  lessonProgress  LessonProgress[]
  jobPostings  JobPosting[]
   candidateStatuses CandidateStatus[]
   jobApplication   JobApplication[]
   savedJobs         SavedJob[] 
   orders         Order[]
   cartItems    Cart[]
   educations       Education[]
   projects         Project[]
    workExperiences    WorkExperience[]
}

model UserProfile {
  id               Int      @id @default(autoincrement())
  user_id          Int      @unique
  about_me         String?
  preferred_role   String?
  key_skills       String?
  //education        String?  // JSON string
  //work_experience  String?  // JSON string
//  projects         String?
  address          String?
  city             String?
  pincode          String?
  marital_status   String?
  dob              DateTime?
  work_permit      Boolean?
  profile_pic_url  String?
  profile_complete Boolean?

  user             User     @relation(fields: [user_id], references: [id])
}


model Education {
  id              Int       @id @default(autoincrement())
  userId          Int
  courseDegree    String
  specialization  String?
  universityName  String
  marks           String?        // keep free-form (%, CGPA, etc.)
  startDate       DateTime       // use full date from your picker
  endDate         DateTime?      // null if ‚ÄúPresent‚Äù
  isCurrent       Boolean @default(false)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id])

  @@index([userId, startDate])
}


model Project {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  status      String?     // e.g. Planned/In Progress/Completed
  role        String?
  skills      String?     // comma-separated or free text
  description String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}



model WorkExperience {
  id               Int       @id @default(autoincrement())
  userId           Int
  company          String
  location         String?
  employmentType   String?      // e.g. Full-time, Contract, Intern
  role             String?
  startDate        DateTime
  endDate          DateTime?
  isCurrent        Boolean  @default(false) // if true, endDate will be null
  responsibilities String?  @db.Text

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id])

  @@index([userId, startDate])
}

model Resume {
  id         Int     @id @default(autoincrement())
  user_id    Int
  file_url   String
  created_at DateTime @default(now())

  user       User    @relation(fields: [user_id], references: [id])
}


model JS_languages {
  id         Int       @id @default(autoincrement())
  user_id    Int       // üëà FK to User
  lang_id    Int
  lang_name  String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
   // Relations
  student    User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  language   languages  @relation(fields: [lang_id], references: [lang_id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, lang_id])   // üëà Updated composite unique key

}

model languages {
  lang_id     Int            @id
  lang_name   String
  users       JS_languages[]
  // other fields...
}


model Course {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  category     String?
  totalLessons Int
  language     String?
  duration     Int // minutes
  modules      Module[]
  enrollments  Enrollment[]
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt

  cartItems    Cart[]       // Reverse relation to Cart
  orders       Order[]      // Reverse relation to Order
}

model Module {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  moduleId  Int
  title     String
  videoUrl  String
  duration  Int // in minutes
  lessonProgress  LessonProgress[]
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Enrollment {
  id             Int      @id @default(autoincrement())
  userId         Int
  courseId       Int
  completed      Boolean  @default(false)
  durationSpent  Int      @default(0)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonProgress {
  id        Int     @id @default(autoincrement())
  userId    Int
  lessonId  Int
  completed Boolean @default(true)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}
model CandidateStatus {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    String   @default("NEUTRAL") // SHORTLISTED, REJECTED, HIRED
  taggedBy  Int?     // Employer's userId
  updatedAt DateTime @updatedAt
  jobApplicationId  Int
  user      User       @relation(fields: [userId], references: [id])
  job       JobPosting @relation(fields: [jobId], references: [id])
  @@unique([userId, jobId]) // unique per user-job combination
  jobApplication    JobApplication  @relation(fields: [jobApplicationId], references: [id])
}
model JobPosting {
  id                Int       @id @default(autoincrement())
  title             String
  description       String    @db.Text
  location          String
  workMode          WorkMode
  experienceMin     Int
  experienceMax     Int
  salaryMin         Int
  salaryMax         Int
  companyName       String
  companyLogo       String?        // optional URL
  applyLink         String
  Requirements      String
  Skills            String
  Qualification     String
  TotalNoCandidates String
  Notice            String
  Deadline          String
  CreatedBy         String?        // üëà optional now
  postedAt          DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // NEW: user link (nullable first to avoid migration errors on existing rows)
  userId            Int?
  user              User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  jobApplication    JobApplication[]
  savedByUsers      SavedJob[]
  candidateStatuses CandidateStatus[]
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}
model JobApplication {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    String   // e.g. "Applied", "Reviewed", etc.
  appliedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  job       JobPosting @relation(fields: [jobId], references: [id])
  candidateStatus CandidateStatus[]
  @@unique([userId, jobId])
}
model SavedJob {
  id      Int         @id @default(autoincrement())
  userId  Int
  jobId   Int
  user    User        @relation(fields: [userId], references: [id])
  job     JobPosting  @relation(fields: [jobId], references: [id])
  @@unique([userId, jobId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  courseId  Int
  amount    Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  SUCCESS
  FAILED
}

//Employer prisma here-------------------------------------------

enum CompanyType {
  PRIVATE
  PUBLIC
  NONPROFIT
  GOVERNMENT
}


model EmployerProfile {
  id               Int       @id @default(autoincrement())
  companyName      String
  founderCEO       String?
  overview         String?   @db.Text
  website          String?
  address          String?
  gstNo            String?
  regdNo           String?
  estYear          Int?             // Year Founded
  socialLinks      Json?
   companyEmail     String?
  companyPhone     String?
  industrySector   String?
  companyType      CompanyType?  // enum

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}




//admin part----------------------------------------------------------------------


enum AdminStatus {
  ACTIVE
  SUSPENDED
  DISABLED
}

model Admin {
  id          Int          @id @default(autoincrement())
  fullName    String
  email       String       @unique
  password    String       // bcrypt hash
  phone       String?      @unique
  isSuper     Boolean      @default(false) // can manage other admins
  status      AdminStatus  @default(ACTIVE)
  lastLoginAt DateTime?
  // granular permissions (future-proof)
  scopes      Json?        // e.g. { "courses": ["read","write","delete"], "coupons":["read"] }

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
